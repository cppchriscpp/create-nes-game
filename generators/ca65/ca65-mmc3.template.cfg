<% /* MMC3 has a whole lot of unique requirements, so we maintain another file for it */ %>
MEMORY {
    ZP:     start = $00,    size = $0100, type = rw, file = "", define = yes;
    OAM_MEM:    start = $0200,  size = $0100, type = rw, file = "", define = yes;
    RAM:    start = $0300,  size = $0500, type = rw, file = "", define = yes;
<%_ if (it.game.useSram) { %>
    SRAM:   start = $6000, size = $2000, type = rw, file = "", define = yes;
<%_ } %>
    HDR:    start = $0000,  size = $0010, type = ro, file = %O, fill = yes, fillval = $00;
  <%_ for (let i = 0; i < (it.game.prgBanks - 2) / 2; i++) { %>
    ROM_MA_<%= i.toString().padStart(2, '0') %>: start = $8000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_MB_<%= i.toString().padStart(2, '0') %>: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
  <%_ } %>
    # MMC3 uses exclusively 8kb banks, so we have to break up the 16kb of fixed storage, too.
    PRG:    start = $c000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    PRG_2:  start = $e000, size = $1ffa, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    VEC:    start = $fffa, size = $0006, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
<%_ for (let i = 0; i < it.game.chrBanks; i++) { %>
    CHR_M_<%= i.toString().padStart(2, '0') %>:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
<%_ } %>
}

SEGMENTS {
    ZEROPAGE: load = ZP,  type = zp, define = yes;
    OAM:      load = OAM_MEM, type = bss, align = $100, define = yes;
    BSS:      load = RAM, type = bss, define = yes;
<%_ if (it.game.useSram) { %>
    SRAM:     load = SRAM, type = bss, optional = yes;
<%_ } %>
    HEADER:   load = HDR, type = ro, define = yes;
  <%_ for (let i = 0; i < (it.game.prgBanks - 2) / 2; i++) { %>
    # Banks for mmc3 are split into two groups: 
    # A: The first 8kb section in memory
    # B: The second 8kb section in memory.
    # You can only put banks from section A into the first memory bank, and banks from section B into the second.
    ROM_A_<%= i.toString().padStart(2, '0') %>:   load = ROM_MA_<%= i.toString().padStart(2, '0') %>, type = ro, define = yes;
    ROM_B_<%= i.toString().padStart(2, '0') %>:   load = ROM_MB_<%= i.toString().padStart(2, '0') %>, type = ro, define = yes;
  <%_ } %>
    CODE:     load = PRG, type = ro, define = yes;
    RODATA:   load = PRG, type = ro, define = yes;
<%_ if (it.game.includeC) { %>
    DATA:     load = PRG, run = RAM, type = rw, define = yes;
    ONCE:     load = PRG_2,            type = ro, define = yes;
<%_ } %>
    CODE_2:   load = PRG_2, type = ro, define = yes;
    RODATA_2: load = PRG_2, type = ro, define = yes;
<%_ if (it.game.includeCLibrary !== 'none') { %>
    DMC:      load = PRG_2, type = ro, define = yes, align = $100;
<%_ } %>
    VECTORS:  load = VEC, type = ro, start = $fffa, define = yes;
<%_ for (let i = 0; i < it.game.chrBanks; i++) { %>
    CHR_<%= i.toString().padStart(2, '0') %>:    load = CHR_M_<%= i.toString().padStart(2, '0') %>, type = ro, define = yes;
<%_ } %>
}

<%_ if (it.game.includeC) { %>
FEATURES {

    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}
<%_ } %>